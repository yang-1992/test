package com.ctsi.space.repository;

import com.ctsi.space.domain.BasStation;
import com.ctsi.space.domain.BasStationExample;
import com.ctsi.space.domain.dto.CustomerStationDto;
import com.ctsi.space.domain.dto.SimpleStationDto;
import com.ctsi.space.domain.dto.StationOrgTreeNode;
import org.apache.ibatis.annotations.*;
import org.apache.ibatis.type.JdbcType;

import java.util.List;

/**
 * @author ctsi-biyi-generator
*/
@Mapper
public interface BasStationRepository extends com.ctsi.ssdc.repository.BaseRepository<BasStation, Long, BasStationExample> {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bas_station
     *
     * @mbg.generated Mon Sep 14 11:17:32 CST 2020
     */
    @SelectProvider(type=BasStationSqlProvider.class, method="countByExample")
    long countByExample(BasStationExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bas_station
     *
     * @mbg.generated Mon Sep 14 11:17:32 CST 2020
     */
    @DeleteProvider(type=BasStationSqlProvider.class, method="deleteByExample")
    int deleteByExample(BasStationExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bas_station
     *
     * @mbg.generated Mon Sep 14 11:17:32 CST 2020
     */
    @Delete({
        "delete from bas_station",
        "where station_id = #{stationId,jdbcType=DECIMAL}"
    })
    int deleteByPrimaryKey(Long stationId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bas_station
     *
     * @mbg.generated Mon Sep 14 11:17:32 CST 2020
     */
    @Insert({
        "insert into bas_station (station_id, res_no, ",
        "station_name, station_type, ",
        "admin_district_id, org_id, ",
        "org_type, station_order, ",
        "station_tel, station_address, ",
        "coordinate_x, coordinate_y, ",
        "coordinate_z, note, ",
        "protect_unit, duty_type, ",
        "cdma_node_task, station_owner, ",
        "theater_id, army_type, ",
        "is_liable, duty_num, ",
        "station_unknown_flg, station_valid, ",
        "company, update_timestamp)",
        "values (#{stationId,jdbcType=DECIMAL}, #{resNo,jdbcType=VARCHAR}, ",
        "#{stationName,jdbcType=VARCHAR}, #{stationType,jdbcType=DECIMAL}, ",
        "#{adminDistrictId,jdbcType=DECIMAL}, #{orgId,jdbcType=DECIMAL}, ",
        "#{orgType,jdbcType=DECIMAL}, #{stationOrder,jdbcType=DECIMAL}, ",
        "#{stationTel,jdbcType=VARCHAR}, #{stationAddress,jdbcType=VARCHAR}, ",
        "#{coordinateX,jdbcType=DECIMAL}, #{coordinateY,jdbcType=DECIMAL}, ",
        "#{coordinateZ,jdbcType=DECIMAL}, #{note,jdbcType=VARCHAR}, ",
        "#{protectUnit,jdbcType=VARCHAR}, #{dutyType,jdbcType=DECIMAL}, ",
        "#{cdmaNodeTask,jdbcType=VARCHAR}, #{stationOwner,jdbcType=DECIMAL}, ",
        "#{theaterId,jdbcType=DECIMAL}, #{armyType,jdbcType=DECIMAL}, ",
        "#{isLiable,jdbcType=DECIMAL}, #{dutyNum,jdbcType=DECIMAL}, ",
        "#{stationUnknownFlg,jdbcType=TINYINT}, #{stationValid,jdbcType=TINYINT}, ",
        "#{company,jdbcType=VARCHAR}, #{updateTimestamp,jdbcType=TIMESTAMP})"
    })
    int insert(BasStation record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bas_station
     *
     * @mbg.generated Mon Sep 14 11:17:32 CST 2020
     */
    @InsertProvider(type=BasStationSqlProvider.class, method="insertSelective")
    int insertSelective(BasStation record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bas_station
     *
     * @mbg.generated Mon Sep 14 11:17:32 CST 2020
     */
    @SelectProvider(type=BasStationSqlProvider.class, method="selectByExample")
    @Results({
        @Result(column="station_id", property="stationId", jdbcType=JdbcType.DECIMAL, id=true),
        @Result(column="res_no", property="resNo", jdbcType=JdbcType.VARCHAR),
        @Result(column="station_name", property="stationName", jdbcType=JdbcType.VARCHAR),
        @Result(column="station_type", property="stationType", jdbcType=JdbcType.DECIMAL),
        @Result(column="admin_district_id", property="adminDistrictId", jdbcType=JdbcType.DECIMAL),
        @Result(column="org_id", property="orgId", jdbcType=JdbcType.DECIMAL),
        @Result(column="org_type", property="orgType", jdbcType=JdbcType.DECIMAL),
        @Result(column="station_order", property="stationOrder", jdbcType=JdbcType.DECIMAL),
        @Result(column="station_tel", property="stationTel", jdbcType=JdbcType.VARCHAR),
        @Result(column="station_address", property="stationAddress", jdbcType=JdbcType.VARCHAR),
        @Result(column="coordinate_x", property="coordinateX", jdbcType=JdbcType.DECIMAL),
        @Result(column="coordinate_y", property="coordinateY", jdbcType=JdbcType.DECIMAL),
        @Result(column="coordinate_z", property="coordinateZ", jdbcType=JdbcType.DECIMAL),
        @Result(column="note", property="note", jdbcType=JdbcType.VARCHAR),
        @Result(column="protect_unit", property="protectUnit", jdbcType=JdbcType.VARCHAR),
        @Result(column="duty_type", property="dutyType", jdbcType=JdbcType.DECIMAL),
        @Result(column="cdma_node_task", property="cdmaNodeTask", jdbcType=JdbcType.VARCHAR),
        @Result(column="station_owner", property="stationOwner", jdbcType=JdbcType.DECIMAL),
        @Result(column="theater_id", property="theaterId", jdbcType=JdbcType.DECIMAL),
        @Result(column="army_type", property="armyType", jdbcType=JdbcType.DECIMAL),
        @Result(column="is_liable", property="isLiable", jdbcType=JdbcType.DECIMAL),
        @Result(column="duty_num", property="dutyNum", jdbcType=JdbcType.DECIMAL),
        @Result(column="station_unknown_flg", property="stationUnknownFlg", jdbcType=JdbcType.TINYINT),
        @Result(column="station_valid", property="stationValid", jdbcType=JdbcType.TINYINT),
        @Result(column="company", property="company", jdbcType=JdbcType.VARCHAR),
        @Result(column="update_timestamp", property="updateTimestamp", jdbcType=JdbcType.TIMESTAMP)
    })
    List<BasStation> selectByExample(BasStationExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bas_station
     *
     * @mbg.generated Mon Sep 14 11:17:32 CST 2020
     */
    @Select({
        "select",
        "station_id, res_no, station_name, station_type, admin_district_id, org_id, org_type, ",
        "station_order, station_tel, station_address, coordinate_x, coordinate_y, coordinate_z, ",
        "note, protect_unit, duty_type, cdma_node_task, station_owner, theater_id, army_type, ",
        "is_liable, duty_num, station_unknown_flg, station_valid, company, update_timestamp",
        "from bas_station",
        "where station_id = #{stationId,jdbcType=DECIMAL}"
    })
    @Results({
        @Result(column="station_id", property="stationId", jdbcType=JdbcType.DECIMAL, id=true),
        @Result(column="res_no", property="resNo", jdbcType=JdbcType.VARCHAR),
        @Result(column="station_name", property="stationName", jdbcType=JdbcType.VARCHAR),
        @Result(column="station_type", property="stationType", jdbcType=JdbcType.DECIMAL),
        @Result(column="admin_district_id", property="adminDistrictId", jdbcType=JdbcType.DECIMAL),
        @Result(column="org_id", property="orgId", jdbcType=JdbcType.DECIMAL),
        @Result(column="org_type", property="orgType", jdbcType=JdbcType.DECIMAL),
        @Result(column="station_order", property="stationOrder", jdbcType=JdbcType.DECIMAL),
        @Result(column="station_tel", property="stationTel", jdbcType=JdbcType.VARCHAR),
        @Result(column="station_address", property="stationAddress", jdbcType=JdbcType.VARCHAR),
        @Result(column="coordinate_x", property="coordinateX", jdbcType=JdbcType.DECIMAL),
        @Result(column="coordinate_y", property="coordinateY", jdbcType=JdbcType.DECIMAL),
        @Result(column="coordinate_z", property="coordinateZ", jdbcType=JdbcType.DECIMAL),
        @Result(column="note", property="note", jdbcType=JdbcType.VARCHAR),
        @Result(column="protect_unit", property="protectUnit", jdbcType=JdbcType.VARCHAR),
        @Result(column="duty_type", property="dutyType", jdbcType=JdbcType.DECIMAL),
        @Result(column="cdma_node_task", property="cdmaNodeTask", jdbcType=JdbcType.VARCHAR),
        @Result(column="station_owner", property="stationOwner", jdbcType=JdbcType.DECIMAL),
        @Result(column="theater_id", property="theaterId", jdbcType=JdbcType.DECIMAL),
        @Result(column="army_type", property="armyType", jdbcType=JdbcType.DECIMAL),
        @Result(column="is_liable", property="isLiable", jdbcType=JdbcType.DECIMAL),
        @Result(column="duty_num", property="dutyNum", jdbcType=JdbcType.DECIMAL),
        @Result(column="station_unknown_flg", property="stationUnknownFlg", jdbcType=JdbcType.TINYINT),
        @Result(column="station_valid", property="stationValid", jdbcType=JdbcType.TINYINT),
        @Result(column="company", property="company", jdbcType=JdbcType.VARCHAR),
        @Result(column="update_timestamp", property="updateTimestamp", jdbcType=JdbcType.TIMESTAMP)
    })
    BasStation selectByPrimaryKey(Long stationId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bas_station
     *
     * @mbg.generated Mon Sep 14 11:17:32 CST 2020
     */
    @UpdateProvider(type=BasStationSqlProvider.class, method="updateByExampleSelective")
    int updateByExampleSelective(@Param("record") BasStation record, @Param("example") BasStationExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bas_station
     *
     * @mbg.generated Mon Sep 14 11:17:32 CST 2020
     */
    @UpdateProvider(type=BasStationSqlProvider.class, method="updateByExample")
    int updateByExample(@Param("record") BasStation record, @Param("example") BasStationExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bas_station
     *
     * @mbg.generated Mon Sep 14 11:17:32 CST 2020
     */
    @UpdateProvider(type=BasStationSqlProvider.class, method="updateByPrimaryKeySelective")
    int updateByPrimaryKeySelective(BasStation record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bas_station
     *
     * @mbg.generated Mon Sep 14 11:17:32 CST 2020
     */
    @Update({
        "update bas_station",
        "set res_no = #{resNo,jdbcType=VARCHAR},",
          "station_name = #{stationName,jdbcType=VARCHAR},",
          "station_type = #{stationType,jdbcType=DECIMAL},",
          "admin_district_id = #{adminDistrictId,jdbcType=DECIMAL},",
          "org_id = #{orgId,jdbcType=DECIMAL},",
          "org_type = #{orgType,jdbcType=DECIMAL},",
          "station_order = #{stationOrder,jdbcType=DECIMAL},",
          "station_tel = #{stationTel,jdbcType=VARCHAR},",
          "station_address = #{stationAddress,jdbcType=VARCHAR},",
          "coordinate_x = #{coordinateX,jdbcType=DECIMAL},",
          "coordinate_y = #{coordinateY,jdbcType=DECIMAL},",
          "coordinate_z = #{coordinateZ,jdbcType=DECIMAL},",
          "note = #{note,jdbcType=VARCHAR},",
          "protect_unit = #{protectUnit,jdbcType=VARCHAR},",
          "duty_type = #{dutyType,jdbcType=DECIMAL},",
          "cdma_node_task = #{cdmaNodeTask,jdbcType=VARCHAR},",
          "station_owner = #{stationOwner,jdbcType=DECIMAL},",
          "theater_id = #{theaterId,jdbcType=DECIMAL},",
          "army_type = #{armyType,jdbcType=DECIMAL},",
          "is_liable = #{isLiable,jdbcType=DECIMAL},",
          "duty_num = #{dutyNum,jdbcType=DECIMAL},",
          "station_unknown_flg = #{stationUnknownFlg,jdbcType=TINYINT},",
          "station_valid = #{stationValid,jdbcType=TINYINT},",
          "company = #{company,jdbcType=VARCHAR},",
          "update_timestamp = #{updateTimestamp,jdbcType=TIMESTAMP}",
        "where station_id = #{stationId,jdbcType=DECIMAL}"
    })
    int updateByPrimaryKey(BasStation record);

    /**
     * 根据友邻台站组织ID查询组织台站信息
     * @param cusId 友邻台站组织ID
     * @return List<CustomerStationDto>
     */
    @Select("SELECT a.station_id stationId,a.station_id treeId,a.station_name stationName, a.station_name title, " +
            "b.cus_id cusId,b.cus_name cusName,b.cus_level cusLevel " +
            "FROM bas_db.bas_station a " +
            "LEFT JOIN bas_db.bas_customer b on a.org_id=b.cus_id " +
            "WHERE b.cus_id=#{cus_id} AND a.station_valid=0 AND a.station_type=101003002001")
    List<CustomerStationDto> findStationsByCusId(Long cusId);

    /**
     * 根据组织ID查找其下所有台站信息
     * @param orgId 组织ID
     * @return 组织其下所有台站信息
     */
    @Select("SELECT s.station_id `id`,s.station_name `name`,s.org_id parentId FROM bas_station s " +
            "JOIN (SELECT * FROM bas_organization WHERE org_path LIKE '%/${orgId}/%' AND is_valid=0) o " +
            "ON s.org_id = o.org_id AND s.station_valid=0 AND s.station_type=101003002001")
    List<StationOrgTreeNode> findStationsByOrgId(@Param("orgId") Long orgId);

    /**
     * 根据组织ID查找其下所有台站ID
     * @param orgId 组织ID
     * @return 组织其下所有台站ID
     */
    @Select("SELECT DISTINCT s.station_id FROM bas_station s " +
            "JOIN (SELECT * FROM bas_organization WHERE org_path LIKE '%/${orgId}/%' AND is_valid=0) o " +
            "ON s.org_id = o.org_id AND s.station_valid=0 AND s.station_type=101003002001")
    List<Long> findStationIdsByOrgId(@Param("orgId") Long orgId);

    /**
     * 根据名称和组织ID搜索下属的台站
     * @param stationName 台站名称
     * @param orgId 组织ID
     * @return 下属台站的简要信息
     */
    @Select("SELECT s.station_id stationId,s.station_name stationName FROM bas_station s WHERE " +
            "s.station_valid=0 AND s.station_type=101003002001 AND s.station_name LIKE CONCAT('%',#{stationName},'%') " +
            "AND s.org_id IN (SELECT cus_id FROM bas_customer WHERE cus_path LIKE CONCAT('%/',#{orgId},'/%') ) LIMIT 10")
    List<SimpleStationDto> searchStationByNameAndOrgId(@Param("stationName") String stationName,
                                                       @Param("orgId") Long orgId);
}