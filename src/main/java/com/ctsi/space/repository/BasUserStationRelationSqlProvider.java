package com.ctsi.space.repository;

import com.ctsi.space.domain.BasUserStationRelation;
import com.ctsi.space.domain.BasUserStationRelationExample;
import com.ctsi.space.domain.BasUserStationRelationExample.Criteria;
import com.ctsi.space.domain.BasUserStationRelationExample.Criterion;
import com.ctsi.space.utils.PrimaryKeyBuild;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.jdbc.SQL;

import java.util.List;
import java.util.Map;

/**
 * @author ctsi-biyi-generator
*/
public class BasUserStationRelationSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bas_user_station_relation
     *
     * @mbg.generated Wed Sep 16 13:10:12 CST 2020
     */
    public String countByExample(BasUserStationRelationExample example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("bas_user_station_relation");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bas_user_station_relation
     *
     * @mbg.generated Wed Sep 16 13:10:12 CST 2020
     */
    public String deleteByExample(BasUserStationRelationExample example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("bas_user_station_relation");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bas_user_station_relation
     *
     * @mbg.generated Wed Sep 16 13:10:12 CST 2020
     */
    public String insertSelective(BasUserStationRelation record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("bas_user_station_relation");
        
        if (record.getId() != null) {
            sql.VALUES("id", "#{id,jdbcType=DECIMAL}");
        }
        
        if (record.getUserId() != null) {
            sql.VALUES("user_id", "#{userId,jdbcType=DECIMAL}");
        }
        
        if (record.getStationId() != null) {
            sql.VALUES("station_id", "#{stationId,jdbcType=DECIMAL}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bas_user_station_relation
     *
     * @mbg.generated Wed Sep 16 13:10:12 CST 2020
     */
    public String selectByExample(BasUserStationRelationExample example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("id");
        } else {
            sql.SELECT("id");
        }
        sql.SELECT("user_id");
        sql.SELECT("station_id");
        sql.FROM("bas_user_station_relation");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bas_user_station_relation
     *
     * @mbg.generated Wed Sep 16 13:10:12 CST 2020
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        BasUserStationRelation record = (BasUserStationRelation) parameter.get("record");
        BasUserStationRelationExample example = (BasUserStationRelationExample) parameter.get("example");
        
        SQL sql = new SQL();
        sql.UPDATE("bas_user_station_relation");
        
        if (record.getId() != null) {
            sql.SET("id = #{record.id,jdbcType=DECIMAL}");
        }
        
        if (record.getUserId() != null) {
            sql.SET("user_id = #{record.userId,jdbcType=DECIMAL}");
        }
        
        if (record.getStationId() != null) {
            sql.SET("station_id = #{record.stationId,jdbcType=DECIMAL}");
        }
        
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bas_user_station_relation
     *
     * @mbg.generated Wed Sep 16 13:10:12 CST 2020
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("bas_user_station_relation");
        
        sql.SET("id = #{record.id,jdbcType=DECIMAL}");
        sql.SET("user_id = #{record.userId,jdbcType=DECIMAL}");
        sql.SET("station_id = #{record.stationId,jdbcType=DECIMAL}");
        
        BasUserStationRelationExample example = (BasUserStationRelationExample) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bas_user_station_relation
     *
     * @mbg.generated Wed Sep 16 13:10:12 CST 2020
     */
    public String updateByPrimaryKeySelective(BasUserStationRelation record) {
        SQL sql = new SQL();
        sql.UPDATE("bas_user_station_relation");
        
        if (record.getUserId() != null) {
            sql.SET("user_id = #{userId,jdbcType=DECIMAL}");
        }
        
        if (record.getStationId() != null) {
            sql.SET("station_id = #{stationId,jdbcType=DECIMAL}");
        }
        
        sql.WHERE("id = #{id,jdbcType=DECIMAL}");
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bas_user_station_relation
     *
     * @mbg.generated Wed Sep 16 13:10:12 CST 2020
     */
    protected void applyWhere(SQL sql, BasUserStationRelationExample example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }

    public String insertUserStationRelListForStations(@Param("userId") Long userId,
                                                      @Param("stationIds") List<Long> stationIds) {
        StringBuilder sql = new StringBuilder("INSERT INTO bas_user_station_relation (id,user_id,station_id) VALUES ");
        List<Long> ids = PrimaryKeyBuild.createIdAtMostOneHundred(stationIds.size());
        for (int i = 0; i < stationIds.size(); i++) {
            sql.append(String.format("(%d,%d,%d)", ids.get(i), userId, stationIds.get(i)));
            if (i != stationIds.size() -1) {
                sql.append(",");
            }
        }
        return sql.toString();
    }

    public String insertUserStationRelListForUsers(@Param("stationId") Long stationId,
                                                   @Param("userIds") List<Long> userIds) {
        StringBuilder sql = new StringBuilder("INSERT INTO bas_user_station_relation (id,user_id,station_id) VALUES ");
        List<Long> ids = PrimaryKeyBuild.createIdAtMostOneHundred(userIds.size());
        for (int i = 0; i < userIds.size(); i++) {
            sql.append(String.format("(%d,%d,%d)", ids.get(i), userIds.get(i), stationId));
            if (i != userIds.size() -1) {
                sql.append(",");
            }
        }
        return sql.toString();
    }

    public String deleteUserStationRelListForStations(@Param("userId") Long userId,
                                           @Param("stationIds") List<Long> stationIds) {
        StringBuilder sql = new StringBuilder("DELETE FROM bas_user_station_relation WHERE user_id = ");
        sql.append(userId).append(" AND station_id IN (");
        for (int i = 0; i < stationIds.size(); i++) {
            sql.append(stationIds.get(i));
            if (i != stationIds.size() - 1) {
                sql.append(",");
            } else {
                sql.append(")");
            }
        }
        return sql.toString();
    }


    public String deleteUserStationRelListForUsers(@Param("stationId") Long stationId,
                                           @Param("userIds") List<Long> userIds) {
        StringBuilder sql = new StringBuilder("DELETE FROM bas_user_station_relation WHERE station_id = ");
        sql.append(stationId).append(" AND user_id IN (");
        for (int i = 0; i < userIds.size(); i++) {
            sql.append(userIds.get(i));
            if (i != userIds.size() - 1) {
                sql.append(",");
            } else {
                sql.append(")");
            }
        }
        return sql.toString();
    }
}