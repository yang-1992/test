package com.ctsi.block.repository;

import com.ctsi.block.domain.BlockedInfo;
import com.ctsi.block.domain.BlockedInfoExample;
import com.ctsi.block.domain.dto.BlockedInfoDto;
import com.ctsi.block.domain.dto.BlockedParamDto;
import com.ctsi.block.domain.dto.OrgTree;
import org.apache.ibatis.annotations.*;
import org.apache.ibatis.type.JdbcType;
import org.springframework.stereotype.Repository;

import java.util.List;

/**
 * @author ctsi-biyi-generator
*/
@Mapper
@Repository
public interface BlockedInfoRepository extends com.ctsi.ssdc.repository.BaseRepository<BlockedInfo, Object, BlockedInfoExample> {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table blocked_info
     *
     * @mbg.generated Wed Oct 28 17:18:43 CST 2020
     */
    @SelectProvider(type=BlockedInfoSqlProvider.class, method="countByExample")
    long countByExample(BlockedInfoExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table blocked_info
     *
     * @mbg.generated Wed Oct 28 17:18:43 CST 2020
     */
    @DeleteProvider(type=BlockedInfoSqlProvider.class, method="deleteByExample")
    int deleteByExample(BlockedInfoExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table blocked_info
     *
     * @mbg.generated Wed Oct 28 17:18:43 CST 2020
     */
    @Insert({
        "insert into blocked_info (blocked_id, is_valid, ",
        "specility_type, trans_level, ",
        "start_date, stop_date, blocked_duration, ",
        "admin_distirct_id, maint_org_type, ",
        "maint_org_id, maint_org, ",
        "charge_range, blocked_type, ",
        "blocked_reason, opt_id, ",
        "opt_name, opt_seg_id, ",
        "opt_seg_name, station_id, ",
        "station_name, is_cnt_times, ",
        "is_cnt_duration, blocked_detail, ",
        "affact_range, blocked_state, ",
        "claim_state, user_id, ",
        "org_id, commit_date, ",
        "lv_checker, lv_check_date, ",
        "lv_check_state, base_checker, ",
        "base_check_date, base_check_state, ",
        "modify_user, modify_date)",
        "values (#{blockedId,jdbcType=DECIMAL}, #{isValid,jdbcType=DECIMAL}, ",
        "#{specilityType,jdbcType=DECIMAL}, #{transLevel,jdbcType=DECIMAL}, ",
        "#{startDate,jdbcType=DATE}, #{stopDate,jdbcType=DATE}, #{blockedDuration,jdbcType=INTEGER}, ",
        "#{adminDistirctId,jdbcType=DECIMAL}, #{maintOrgType,jdbcType=DECIMAL}, ",
        "#{maintOrgId,jdbcType=DECIMAL}, #{maintOrg,jdbcType=VARCHAR}, ",
        "#{chargeRange,jdbcType=DECIMAL}, #{blockedType,jdbcType=DECIMAL}, ",
        "#{blockedReason,jdbcType=DECIMAL}, #{optId,jdbcType=DECIMAL}, ",
        "#{optName,jdbcType=VARCHAR}, #{optSegId,jdbcType=DECIMAL}, ",
        "#{optSegName,jdbcType=VARCHAR}, #{stationId,jdbcType=DECIMAL}, ",
        "#{stationName,jdbcType=VARCHAR}, #{isCntTimes,jdbcType=INTEGER}, ",
        "#{isCntDuration,jdbcType=INTEGER}, #{blockedDetail,jdbcType=VARCHAR}, ",
        "#{affactRange,jdbcType=VARCHAR}, #{blockedState,jdbcType=DECIMAL}, ",
        "#{claimState,jdbcType=DECIMAL}, #{userId,jdbcType=DECIMAL}, ",
        "#{orgId,jdbcType=DECIMAL}, #{commitDate,jdbcType=DATE}, ",
        "#{lvChecker,jdbcType=DECIMAL}, #{lvCheckDate,jdbcType=DATE}, ",
        "#{lvCheckState,jdbcType=DATE}, #{baseChecker,jdbcType=DECIMAL}, ",
        "#{baseCheckDate,jdbcType=DATE}, #{baseCheckState,jdbcType=DECIMAL}, ",
        "#{modifyUser,jdbcType=DECIMAL}, #{modifyDate,jdbcType=DATE})"
    })
    int insert(BlockedInfo record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table blocked_info
     *
     * @mbg.generated Wed Oct 28 17:18:43 CST 2020
     */
    @InsertProvider(type=BlockedInfoSqlProvider.class, method="insertSelective")
    int insertSelective(BlockedInfo record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table blocked_info
     *
     * @mbg.generated Wed Oct 28 17:18:43 CST 2020
     */
    @SelectProvider(type=BlockedInfoSqlProvider.class, method="selectByExample")
    @Results({
        @Result(column="blocked_id", property="blockedId", jdbcType=JdbcType.DECIMAL),
        @Result(column="is_valid", property="isValid", jdbcType=JdbcType.DECIMAL),
        @Result(column="specility_type", property="specilityType", jdbcType=JdbcType.DECIMAL),
        @Result(column="trans_level", property="transLevel", jdbcType=JdbcType.DECIMAL),
        @Result(column="start_date", property="startDate", jdbcType=JdbcType.DATE),
        @Result(column="stop_date", property="stopDate", jdbcType=JdbcType.DATE),
        @Result(column="blocked_duration", property="blockedDuration", jdbcType=JdbcType.INTEGER),
        @Result(column="admin_distirct_id", property="adminDistirctId", jdbcType=JdbcType.DECIMAL),
        @Result(column="maint_org_type", property="maintOrgType", jdbcType=JdbcType.DECIMAL),
        @Result(column="maint_org_id", property="maintOrgId", jdbcType=JdbcType.DECIMAL),
        @Result(column="maint_org", property="maintOrg", jdbcType=JdbcType.VARCHAR),
        @Result(column="charge_range", property="chargeRange", jdbcType=JdbcType.DECIMAL),
        @Result(column="blocked_type", property="blockedType", jdbcType=JdbcType.DECIMAL),
        @Result(column="blocked_reason", property="blockedReason", jdbcType=JdbcType.DECIMAL),
        @Result(column="opt_id", property="optId", jdbcType=JdbcType.DECIMAL),
        @Result(column="opt_name", property="optName", jdbcType=JdbcType.VARCHAR),
        @Result(column="opt_seg_id", property="optSegId", jdbcType=JdbcType.DECIMAL),
        @Result(column="opt_seg_name", property="optSegName", jdbcType=JdbcType.VARCHAR),
        @Result(column="station_id", property="stationId", jdbcType=JdbcType.DECIMAL),
        @Result(column="station_name", property="stationName", jdbcType=JdbcType.VARCHAR),
        @Result(column="is_cnt_times", property="isCntTimes", jdbcType=JdbcType.INTEGER),
        @Result(column="is_cnt_duration", property="isCntDuration", jdbcType=JdbcType.INTEGER),
        @Result(column="blocked_detail", property="blockedDetail", jdbcType=JdbcType.VARCHAR),
        @Result(column="affact_range", property="affactRange", jdbcType=JdbcType.VARCHAR),
        @Result(column="blocked_state", property="blockedState", jdbcType=JdbcType.DECIMAL),
        @Result(column="claim_state", property="claimState", jdbcType=JdbcType.DECIMAL),
        @Result(column="user_id", property="userId", jdbcType=JdbcType.DECIMAL),
        @Result(column="org_id", property="orgId", jdbcType=JdbcType.DECIMAL),
        @Result(column="commit_date", property="commitDate", jdbcType=JdbcType.DATE),
        @Result(column="lv_checker", property="lvChecker", jdbcType=JdbcType.DECIMAL),
        @Result(column="lv_check_date", property="lvCheckDate", jdbcType=JdbcType.DATE),
        @Result(column="lv_check_state", property="lvCheckState", jdbcType=JdbcType.DATE),
        @Result(column="base_checker", property="baseChecker", jdbcType=JdbcType.DECIMAL),
        @Result(column="base_check_date", property="baseCheckDate", jdbcType=JdbcType.DATE),
        @Result(column="base_check_state", property="baseCheckState", jdbcType=JdbcType.DECIMAL),
        @Result(column="modify_user", property="modifyUser", jdbcType=JdbcType.DECIMAL),
        @Result(column="modify_date", property="modifyDate", jdbcType=JdbcType.DATE)
    })
    List<BlockedInfo> selectByExample(BlockedInfoExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table blocked_info
     *
     * @mbg.generated Wed Oct 28 17:18:43 CST 2020
     */
    @UpdateProvider(type=BlockedInfoSqlProvider.class, method="updateByExampleSelective")
    int updateByExampleSelective(@Param("record") BlockedInfo record, @Param("example") BlockedInfoExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table blocked_info
     *
     * @mbg.generated Wed Oct 28 17:18:43 CST 2020
     */
    @UpdateProvider(type=BlockedInfoSqlProvider.class, method="updateByExample")
    int updateByExample(@Param("record") BlockedInfo record, @Param("example") BlockedInfoExample example);

    /**
     *      组织数结构(组织表)
     *
     * */
    @Select({
    "select org_id,parent_org_id,org_full_name,'0' as type from bas_db.bas_organization " ,
    " where parent_org_id = #{orgId} "
    })
    @Results({
    @Result(column="org_id", property="orgId", jdbcType=JdbcType.DECIMAL),
    @Result(column="parent_org_id", property="parentOrgId", jdbcType=JdbcType.DECIMAL),
    @Result(column="org_full_name", property="orgFullName", jdbcType=JdbcType.VARCHAR),
    @Result(column="type", property="type", jdbcType=JdbcType.VARCHAR)
    })
    List<OrgTree> maintOrgSelect(Long orgId);

    /**
     *      组织数结构(站台表)
     *
     * */
    @Select({
            "select station_id,org_id,station_name,'1' as type from bas_db.bas_station " ,
            " where org_id = #{orgId} "
    })
    @Results({
            @Result(column="station_id", property="orgId", jdbcType=JdbcType.DECIMAL),
            @Result(column="org_id", property="parentOrgId", jdbcType=JdbcType.DECIMAL),
            @Result(column="station_name", property="orgFullName", jdbcType=JdbcType.VARCHAR),
            @Result(column="type", property="type", jdbcType=JdbcType.VARCHAR)
    })
    List<OrgTree> stationSelect(Long orgId);


    /**
     *      管辖范围树(站台表)
     *
     * */
    @Select({
            "select org_id,parent_org_id,org_full_name,org_level as type from bas_db.bas_organization " ,
            " where parent_org_id = #{orgId} "
    })
    @Results({
            @Result(column="org_id", property="orgId", jdbcType=JdbcType.DECIMAL),
            @Result(column="parent_org_id", property="parentOrgId", jdbcType=JdbcType.DECIMAL),
            @Result(column="org_full_name", property="orgFullName", jdbcType=JdbcType.VARCHAR),
            @Result(column="org_level", property="orgLevel", jdbcType=JdbcType.VARCHAR)
    })
    List<OrgTree> changeRangSelect(Long orgId);


    /**
     * 阻断查询
     * @param dto 查询参数
     * @return
     */
    @Select({"<script>",
            "SELECT ",
             "t.blocked_id,",
             "r1.basic_data_name_cn as specilityName,",
             "t.specility_type as specilityId,",
             "t.trans_level as transLevelId,",
             "r2.basic_data_name_cn as transLevel,",
             "t.start_date ,",
             "t.stop_date ,",
             "t.blocked_duration,",
             "d.admin_district_name as area,",
             "t.admin_distirct_id as areaId,",
             "case t.maint_org_type when 101001001001 then b1.org_name ",
                                    " else t.maint_org end as maint_org, ",
             "case t.maint_org_type when 101001001001 then t.maint_org_id else null end as maintOrgId, ",
             "case t.maint_org_type when 101001001001 then 'JD' ",
                         " when 101001001002 then '地方' ",
                         " when 101001001003 then 'YL' end as maint_org_type, ",
             "t.maint_org_type as maintOrgTypeId, ",
             "b2.org_name as charge_range, ",
             "t.charge_range as chargeRangeId, ",
             "r4.basic_data_name_cn as blockedType," ,
             "t.blocked_type as blockedTypeId," ,
             "r5.basic_data_name_cn as blockedReason,",
             "t.blocked_reason as blockedReasonId, ",
             "t.opt_name, ",
             "t.opt_id, ",
             "t.opt_seg_name,",
             "t.opt_seg_id,",
             "t.station_name,",
             "t.station_id,",
             "t.is_cnt_times,",
             "t.is_cnt_duration,",
             "r3.basic_data_name_cn blockedStateStr,",
             "t.blocked_state,",
             "case t.claim_state when 101011027001 then '未申请'" ,
                     "else '已申请' end as claim_state,",
             "u1.user_name as userName,",
             "t.commit_date,",
             "u2.user_name as lvChecker,",
             "t.lv_check_date as lvCheckDate,",
             "u3.user_name as baseChecker,",
             "t.base_check_date as baseCheckDate",
            "FROM trans_con_db.blocked_info t ",
            "LEFT JOIN (SELECT l1.basic_data_name_cn,l1.basic_data_id FROM bas_db.bas_basic_data_list l1,bas_db.app_basic_type e1",
                "WHERE e1.basic_type_id = l1.basic_type_id AND e1.basic_type_id = '101011023') r1  ON t.specility_type = r1.basic_data_id",
            "LEFT JOIN (SELECT l2.basic_data_name_cn,l2.basic_data_id FROM bas_db.bas_basic_data_list l2,bas_db.app_basic_type e2",
                "WHERE e2.basic_type_id = l2.basic_type_id AND e2.basic_type_id = '101011007') r2 ON t.trans_level = r2.basic_data_id",
            "LEFT JOIN (SELECT l3.basic_data_name_cn,l3.basic_data_id FROM bas_db.bas_basic_data_list l3,bas_db.app_basic_type e3",
                "WHERE e3.basic_type_id = l3.basic_type_id AND e3.basic_type_id = '101011026') r3 ON t.blocked_state = r3.basic_data_id",
            "LEFT JOIN (SELECT l4.basic_data_name_cn,l4.basic_data_id FROM bas_db.bas_basic_data_list l4,bas_db.app_basic_type e4",
                " WHERE e4.basic_type_id = l4.basic_type_id AND e4.basic_type_id = '101011024') r4 ON t.blocked_type = r4.basic_data_id",
            "LEFT JOIN (SELECT l5.basic_data_name_cn,l5.basic_data_id FROM bas_db.bas_basic_data_list l5,bas_db.app_basic_type e5",
            " WHERE e5.basic_type_id = l5.basic_type_id AND e5.basic_type_id = '101011025') r5 ON t.blocked_reason = r5.basic_data_id",
            "LEFT JOIN bas_db.bas_admin_district d  ON t.admin_distirct_id = d.admin_district_id",
            "LEFT JOIN bas_db.bas_user u1 ON t.user_id =u1.user_id",
            "LEFT JOIN bas_db.bas_user u2 ON t.lv_checker = u2.user_id",
            "LEFT JOIN bas_db.bas_user u3 ON t.base_checker = u3.user_id",
            "LEFT JOIN bas_db.bas_organization b1 on b1.org_id = t.maint_org_id",
            "LEFT JOIN bas_db.bas_organization b2 on b2.org_id = t.charge_range",
            "WHERE ",
             "t.is_valid = 1101005011001 ",
                "and t.org_id IN ",
                "  (SELECT ",
                        "    org_id ",
                        "  FROM",
                        "    bas_db.bas_organization ",
                        "  WHERE org_path LIKE CONCAT(",
                        "      '%',",
                        "      (SELECT",
                        "        org_popedom_path",
                        "      FROM",
                        "        bas_db.bas_organization_popedom ",
                        "      WHERE org_id = #{orgId}),",
                        "      '%'",
                        "    ))",
            "<if test=\"specilityType != null\">",
            "and t.specility_type = #{specilityType} ",
            "</if>",
            "<if test=\"transLevel != null\">",
            "and t.trans_level = #{transLevel}",
            "</if>",
            "<if test=\"blockedState != null\">",
            "and t.blocked_state = #{blockedState}",
            "</if>",
            "<if test=\"blockedReason != null and blockedReason != ''\">",
            "and t.blocked_reason like concat('%',#{blockedReason},'%')",
            "</if>",
            "<if test=\"blockedType != null \">",
            "and t.blocked_type = #{blockedType}",
            "</if>",
            "<if test=\"maintOrgType != null \">",
            "and t.maint_org_type = #{maintOrgType}",
            "</if>",
            "<if test=\"startDate != null and startDate != ''\">",
            "and t.start_date >= STR_TO_DATE(#{startDate},'%Y-%m-%d %H:%i:%s')",
            "</if>",
            "<if test=\"stopDate != null and stopDate != ''\">",
            "and t.stop_date <![CDATA[<=]]> STR_TO_DATE(#{stopDate},'%Y-%m-%d %H:%i:%s')",
            "</if>",
            " </script>"

    })
    @Results({
            @Result(column="blocked_id", property="blockedId", jdbcType=JdbcType.DECIMAL),
            @Result(column="specilityName", property="specilityName", jdbcType=JdbcType.VARCHAR),
            @Result(column="specilityId", property="specilityId", jdbcType=JdbcType.VARCHAR),
            @Result(column="transLevelId", property="transLevelId", jdbcType=JdbcType.VARCHAR),
            @Result(column="transLevel", property="transLevel", jdbcType=JdbcType.VARCHAR),
            @Result(column="start_date", property="startDate", jdbcType=JdbcType.TIMESTAMP),
            @Result(column="stop_date", property="stopDate", jdbcType=JdbcType.TIMESTAMP),
            @Result(column="blocked_duration", property="blockedDuration", jdbcType=JdbcType.INTEGER),
            @Result(column="area", property="area", jdbcType=JdbcType.VARCHAR),
            @Result(column="areaId", property="areaId", jdbcType=JdbcType.VARCHAR),
            @Result(column="maint_org", property="maintOrg", jdbcType=JdbcType.VARCHAR),
            @Result(column="maintOrgId", property="maintOrgId", jdbcType=JdbcType.VARCHAR),
            @Result(column="maint_org_type", property="maintOrgType", jdbcType=JdbcType.VARCHAR),
            @Result(column="maintOrgTypeId", property="maintOrgTypeId", jdbcType=JdbcType.VARCHAR),
            @Result(column="charge_range", property="chargeRange", jdbcType=JdbcType.VARCHAR),
            @Result(column="chargeRangeId", property="chargeRangeId", jdbcType=JdbcType.VARCHAR),
            @Result(column="blockedType", property="blockedType", jdbcType=JdbcType.VARCHAR),
            @Result(column="blockedTypeId", property="blockedTypeId", jdbcType=JdbcType.VARCHAR),
            @Result(column="blockedReason", property="blockedReason", jdbcType=JdbcType.VARCHAR),
            @Result(column="blockedReasonId", property="blockedReasonId", jdbcType=JdbcType.VARCHAR),
            @Result(column="opt_name", property="optName", jdbcType=JdbcType.VARCHAR),
            @Result(column="opt_id", property="optId", jdbcType=JdbcType.VARCHAR),
            @Result(column="opt_seg_name", property="optSegName", jdbcType=JdbcType.VARCHAR),
            @Result(column="opt_seg_id", property="optSegId", jdbcType=JdbcType.VARCHAR),
            @Result(column="station_name", property="stationName", jdbcType=JdbcType.VARCHAR),
            @Result(column="station_id", property="stationId", jdbcType=JdbcType.VARCHAR),
            @Result(column="is_cnt_times", property="isCntTimes", jdbcType=JdbcType.DECIMAL),
            @Result(column="is_cnt_duration", property="isCntDuration", jdbcType=JdbcType.DECIMAL),
            @Result(column="blockedStateStr", property="blockedStateStr", jdbcType=JdbcType.VARCHAR),
            @Result(column="blocked_state", property="blockedState", jdbcType=JdbcType.DECIMAL),
            @Result(column="claim_state", property="claimState", jdbcType=JdbcType.DECIMAL),
            @Result(column="userName", property="userName", jdbcType=JdbcType.VARCHAR),
            @Result(column="commit_date", property="commitDate", jdbcType=JdbcType.TIMESTAMP),
            @Result(column="lvChecker", property="lvChecker", jdbcType=JdbcType.VARCHAR),
            @Result(column="lvCheckDate", property="lvCheckDate", jdbcType=JdbcType.TIMESTAMP),
            @Result(column="baseChecker", property="baseChecker", jdbcType=JdbcType.VARCHAR),
            @Result(column="baseCheckDate", property="baseCheckDate", jdbcType=JdbcType.TIMESTAMP),
    })
    List<BlockedInfoDto> queryBlockByPage(BlockedParamDto dto);


    /**
     * 逻辑删除
     * @param blockedId
     * @return
     */
    @Update({
        "update trans_con_db.blocked_info set is_valid = '1101005011002' where blocked_id = #{blockedId} "
    })
    int blockedInfoDelete(Long blockedId);

    /**
     * 获取系统传输级别
     * @param blockedId
     * @return
     */
    @Select({
         "select trans_level,blocked_state from trans_con_db.blocked_info where blocked_id = #{blockedId}"
    })
    @Results({
            @Result(column="trans_level", property="transLevel", jdbcType=JdbcType.VARCHAR),
            @Result(column="blocked_state", property="blockedStateStr", jdbcType=JdbcType.VARCHAR),
    })
    BlockedInfoDto selectByBlockedId(Long blockedId);


    /**
     * 申请索赔
     * @param blockedId
     * @return
     */
    @Update({
            "update trans_con_db.blocked_info set claim_state = 101011027002 where blocked_id = #{blockedId}"
    })
    int claimStatusUpdate(Long blockedId);

    /**
     * 获取userId
     * @param userId
     * @return
     */
    @Select({
            "select org_id from bas_db.bas_user where user_id = #{userId}"
    })
    long getOrgIdByuserId(Long userId);
}