package com.ctsi.block.repository;

import com.ctsi.block.domain.BlockedInfo;
import com.ctsi.block.domain.BlockedInfoExample.Criteria;
import com.ctsi.block.domain.BlockedInfoExample.Criterion;
import com.ctsi.block.domain.BlockedInfoExample;
import java.util.List;
import java.util.Map;
import org.apache.ibatis.jdbc.SQL;

/**
 * @author ctsi-biyi-generator
*/
public class BlockedInfoSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table blocked_info
     *
     * @mbg.generated Wed Oct 28 17:18:43 CST 2020
     */
    public String countByExample(BlockedInfoExample example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("blocked_info");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table blocked_info
     *
     * @mbg.generated Wed Oct 28 17:18:43 CST 2020
     */
    public String deleteByExample(BlockedInfoExample example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("blocked_info");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table blocked_info
     *
     * @mbg.generated Wed Oct 28 17:18:43 CST 2020
     */
    public String insertSelective(BlockedInfo record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("trans_con_db.blocked_info");
        
        if (record.getBlockedId() != null) {
            sql.VALUES("blocked_id", "#{blockedId,jdbcType=DECIMAL}");
        }
        
        if (record.getIsValid() != null) {
            sql.VALUES("is_valid", "#{isValid,jdbcType=DECIMAL}");
        }
        
        if (record.getSpecilityType() != null) {
            sql.VALUES("specility_type", "#{specilityType,jdbcType=DECIMAL}");
        }
        
        if (record.getTransLevel() != null) {
            sql.VALUES("trans_level", "#{transLevel,jdbcType=DECIMAL}");
        }
        
        if (record.getStartDate() != null) {
            sql.VALUES("start_date", "#{startDate,jdbcType=DATE}");
        }
        
        if (record.getStopDate() != null) {
            sql.VALUES("stop_date", "#{stopDate,jdbcType=DATE}");
        }
        
        if (record.getBlockedDuration() != null) {
            sql.VALUES("blocked_duration", "#{blockedDuration,jdbcType=DOUBLE}");
        }
        
        if (record.getAdminDistirctId() != null) {
            sql.VALUES("admin_distirct_id", "#{adminDistirctId,jdbcType=DECIMAL}");
        }
        
        if (record.getMaintOrgType() != null) {
            sql.VALUES("maint_org_type", "#{maintOrgType,jdbcType=DECIMAL}");
        }
        
        if (record.getMaintOrgId() != null) {
            sql.VALUES("maint_org_id", "#{maintOrgId,jdbcType=DECIMAL}");
        }
        
        if (record.getMaintOrg() != null) {
            sql.VALUES("maint_org", "#{maintOrg,jdbcType=VARCHAR}");
        }
        
        if (record.getChargeRange() != null) {
            sql.VALUES("charge_range", "#{chargeRange,jdbcType=DECIMAL}");
        }
        
        if (record.getBlockedType() != null) {
            sql.VALUES("blocked_type", "#{blockedType,jdbcType=DECIMAL}");
        }
        
        if (record.getBlockedReason() != null) {
            sql.VALUES("blocked_reason", "#{blockedReason,jdbcType=DECIMAL}");
        }
        
        if (record.getOptId() != null) {
            sql.VALUES("opt_id", "#{optId,jdbcType=DECIMAL}");
        }
        
        if (record.getOptName() != null) {
            sql.VALUES("opt_name", "#{optName,jdbcType=VARCHAR}");
        }
        
        if (record.getOptSegId() != null) {
            sql.VALUES("opt_seg_id", "#{optSegId,jdbcType=DECIMAL}");
        }
        
        if (record.getOptSegName() != null) {
            sql.VALUES("opt_seg_name", "#{optSegName,jdbcType=VARCHAR}");
        }
        
        if (record.getStationId() != null) {
            sql.VALUES("station_id", "#{stationId,jdbcType=DECIMAL}");
        }
        
        if (record.getStationName() != null) {
            sql.VALUES("station_name", "#{stationName,jdbcType=VARCHAR}");
        }
        
        if (record.getIsCntTimes() != null) {
            sql.VALUES("is_cnt_times", "#{isCntTimes,jdbcType=DECIMAL}");
        }
        
        if (record.getIsCntDuration() != null) {
            sql.VALUES("is_cnt_duration", "#{isCntDuration,jdbcType=DECIMAL}");
        }
        
        if (record.getBlockedDetail() != null) {
            sql.VALUES("blocked_detail", "#{blockedDetail,jdbcType=VARCHAR}");
        }
        
        if (record.getAffactRange() != null) {
            sql.VALUES("affact_range", "#{affactRange,jdbcType=VARCHAR}");
        }
        
        if (record.getBlockedState() != null) {
            sql.VALUES("blocked_state", "#{blockedState,jdbcType=DECIMAL}");
        }
        
        if (record.getClaimState() != null) {
            sql.VALUES("claim_state", "#{claimState,jdbcType=DECIMAL}");
        }
        
        if (record.getUserId() != null) {
            sql.VALUES("user_id", "#{userId,jdbcType=DECIMAL}");
        }
        
        if (record.getOrgId() != null) {
            sql.VALUES("org_id", "#{orgId,jdbcType=DECIMAL}");
        }
        
        if (record.getCommitDate() != null) {
            sql.VALUES("commit_date", "#{commitDate,jdbcType=DATE}");
        }
        
        if (record.getLvChecker() != null) {
            sql.VALUES("lv_checker", "#{lvChecker,jdbcType=DECIMAL}");
        }
        
        if (record.getLvCheckDate() != null) {
            sql.VALUES("lv_check_date", "#{lvCheckDate,jdbcType=DATE}");
        }
        
        if (record.getLvCheckState() != null) {
            sql.VALUES("lv_check_state", "#{lvCheckState,jdbcType=DATE}");
        }
        
        if (record.getBaseChecker() != null) {
            sql.VALUES("base_checker", "#{baseChecker,jdbcType=DECIMAL}");
        }
        
        if (record.getBaseCheckDate() != null) {
            sql.VALUES("base_check_date", "#{baseCheckDate,jdbcType=DATE}");
        }
        
        if (record.getBaseCheckState() != null) {
            sql.VALUES("base_check_state", "#{baseCheckState,jdbcType=DECIMAL}");
        }
        
        if (record.getModifyUser() != null) {
            sql.VALUES("modify_user", "#{modifyUser,jdbcType=DECIMAL}");
        }
        
        if (record.getModifyDate() != null) {
            sql.VALUES("modify_date", "#{modifyDate,jdbcType=DATE}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table blocked_info
     *
     * @mbg.generated Wed Oct 28 17:18:43 CST 2020
     */
    public String selectByExample(BlockedInfoExample example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("blocked_id");
        } else {
            sql.SELECT("blocked_id");
        }
        sql.SELECT("is_valid");
        sql.SELECT("specility_type");
        sql.SELECT("trans_level");
        sql.SELECT("start_date");
        sql.SELECT("stop_date");
        sql.SELECT("blocked_duration");
        sql.SELECT("admin_distirct_id");
        sql.SELECT("maint_org_type");
        sql.SELECT("maint_org_id");
        sql.SELECT("maint_org");
        sql.SELECT("charge_range");
        sql.SELECT("blocked_type");
        sql.SELECT("blocked_reason");
        sql.SELECT("opt_id");
        sql.SELECT("opt_name");
        sql.SELECT("opt_seg_id");
        sql.SELECT("opt_seg_name");
        sql.SELECT("station_id");
        sql.SELECT("station_name");
        sql.SELECT("is_cnt_times");
        sql.SELECT("is_cnt_duration");
        sql.SELECT("blocked_detail");
        sql.SELECT("affact_range");
        sql.SELECT("blocked_state");
        sql.SELECT("claim_state");
        sql.SELECT("user_id");
        sql.SELECT("org_id");
        sql.SELECT("commit_date");
        sql.SELECT("lv_checker");
        sql.SELECT("lv_check_date");
        sql.SELECT("lv_check_state");
        sql.SELECT("base_checker");
        sql.SELECT("base_check_date");
        sql.SELECT("base_check_state");
        sql.SELECT("modify_user");
        sql.SELECT("modify_date");
        sql.FROM("blocked_info");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table blocked_info
     *
     * @mbg.generated Wed Oct 28 17:18:43 CST 2020
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        BlockedInfo record = (BlockedInfo) parameter.get("record");
        BlockedInfoExample example = (BlockedInfoExample) parameter.get("example");
        
        SQL sql = new SQL();
        sql.UPDATE("trans_con_db.blocked_info");
        
        if (record.getBlockedId() != null) {
            sql.SET("blocked_id = #{record.blockedId,jdbcType=DECIMAL}");
        }
        
        if (record.getIsValid() != null) {
            sql.SET("is_valid = #{record.isValid,jdbcType=DECIMAL}");
        }
        
        if (record.getSpecilityType() != null) {
            sql.SET("specility_type = #{record.specilityType,jdbcType=DECIMAL}");
        }
        
        if (record.getTransLevel() != null) {
            sql.SET("trans_level = #{record.transLevel,jdbcType=DECIMAL}");
        }
        
        if (record.getStartDate() != null) {
            sql.SET("start_date = #{record.startDate,jdbcType=DATE}");
        }
        
        if (record.getStopDate() != null) {
            sql.SET("stop_date = #{record.stopDate,jdbcType=DATE}");
        }
        
        if (record.getBlockedDuration() != null) {
            sql.SET("blocked_duration = #{record.blockedDuration,jdbcType=INTEGER}");
        }
        
        if (record.getAdminDistirctId() != null) {
            sql.SET("admin_distirct_id = #{record.adminDistirctId,jdbcType=DECIMAL}");
        }
        
        if (record.getMaintOrgType() != null) {
            sql.SET("maint_org_type = #{record.maintOrgType,jdbcType=DECIMAL}");
        }
        
        if (record.getMaintOrgId() != null) {
            sql.SET("maint_org_id = #{record.maintOrgId,jdbcType=DECIMAL}");
        }
        
        if (record.getMaintOrg() != null) {
            sql.SET("maint_org = #{record.maintOrg,jdbcType=VARCHAR}");
        }
        
        if (record.getChargeRange() != null) {
            sql.SET("charge_range = #{record.chargeRange,jdbcType=DECIMAL}");
        }
        
        if (record.getBlockedType() != null) {
            sql.SET("blocked_type = #{record.blockedType,jdbcType=DECIMAL}");
        }
        
        if (record.getBlockedReason() != null) {
            sql.SET("blocked_reason = #{record.blockedReason,jdbcType=DECIMAL}");
        }
        
        if (record.getOptId() != null) {
            sql.SET("opt_id = #{record.optId,jdbcType=DECIMAL}");
        }
        
        if (record.getOptName() != null) {
            sql.SET("opt_name = #{record.optName,jdbcType=VARCHAR}");
        }
        
        if (record.getOptSegId() != null) {
            sql.SET("opt_seg_id = #{record.optSegId,jdbcType=DECIMAL}");
        }
        
        if (record.getOptSegName() != null) {
            sql.SET("opt_seg_name = #{record.optSegName,jdbcType=VARCHAR}");
        }
        
        if (record.getStationId() != null) {
            sql.SET("station_id = #{record.stationId,jdbcType=DECIMAL}");
        }
        
        if (record.getStationName() != null) {
            sql.SET("station_name = #{record.stationName,jdbcType=VARCHAR}");
        }
        
        if (record.getIsCntTimes() != null) {
            sql.SET("is_cnt_times = #{record.isCntTimes,jdbcType=INTEGER}");
        }
        
        if (record.getIsCntDuration() != null) {
            sql.SET("is_cnt_duration = #{record.isCntDuration,jdbcType=INTEGER}");
        }
        
        if (record.getBlockedDetail() != null) {
            sql.SET("blocked_detail = #{record.blockedDetail,jdbcType=VARCHAR}");
        }
        
        if (record.getAffactRange() != null) {
            sql.SET("affact_range = #{record.affactRange,jdbcType=VARCHAR}");
        }
        
        if (record.getBlockedState() != null) {
            sql.SET("blocked_state = #{record.blockedState,jdbcType=DECIMAL}");
        }
        
        if (record.getClaimState() != null) {
            sql.SET("claim_state = #{record.claimState,jdbcType=DECIMAL}");
        }
        
        if (record.getUserId() != null) {
            sql.SET("user_id = #{record.userId,jdbcType=DECIMAL}");
        }
        
        if (record.getOrgId() != null) {
            sql.SET("org_id = #{record.orgId,jdbcType=DECIMAL}");
        }
        
        if (record.getCommitDate() != null) {
            sql.SET("commit_date = #{record.commitDate,jdbcType=DATE}");
        }
        
        if (record.getLvChecker() != null) {
            sql.SET("lv_checker = #{record.lvChecker,jdbcType=DECIMAL}");
        }
        
        if (record.getLvCheckDate() != null) {
            sql.SET("lv_check_date = #{record.lvCheckDate,jdbcType=DATE}");
        }
        
        if (record.getLvCheckState() != null) {
            sql.SET("lv_check_state = #{record.lvCheckState,jdbcType=DATE}");
        }
        
        if (record.getBaseChecker() != null) {
            sql.SET("base_checker = #{record.baseChecker,jdbcType=DECIMAL}");
        }
        
        if (record.getBaseCheckDate() != null) {
            sql.SET("base_check_date = #{record.baseCheckDate,jdbcType=DATE}");
        }
        
        if (record.getBaseCheckState() != null) {
            sql.SET("base_check_state = #{record.baseCheckState,jdbcType=DECIMAL}");
        }
        
        if (record.getModifyUser() != null) {
            sql.SET("modify_user = #{record.modifyUser,jdbcType=DECIMAL}");
        }
        
        if (record.getModifyDate() != null) {
            sql.SET("modify_date = #{record.modifyDate,jdbcType=DATE}");
        }
        
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table blocked_info
     *
     * @mbg.generated Wed Oct 28 17:18:43 CST 2020
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("blocked_info");
        
        sql.SET("blocked_id = #{record.blockedId,jdbcType=DECIMAL}");
        sql.SET("is_valid = #{record.isValid,jdbcType=DECIMAL}");
        sql.SET("specility_type = #{record.specilityType,jdbcType=DECIMAL}");
        sql.SET("trans_level = #{record.transLevel,jdbcType=DECIMAL}");
        sql.SET("start_date = #{record.startDate,jdbcType=DATE}");
        sql.SET("stop_date = #{record.stopDate,jdbcType=DATE}");
        sql.SET("blocked_duration = #{record.blockedDuration,jdbcType=INTEGER}");
        sql.SET("admin_distirct_id = #{record.adminDistirctId,jdbcType=DECIMAL}");
        sql.SET("maint_org_type = #{record.maintOrgType,jdbcType=DECIMAL}");
        sql.SET("maint_org_id = #{record.maintOrgId,jdbcType=DECIMAL}");
        sql.SET("maint_org = #{record.maintOrg,jdbcType=VARCHAR}");
        sql.SET("charge_range = #{record.chargeRange,jdbcType=DECIMAL}");
        sql.SET("blocked_type = #{record.blockedType,jdbcType=DECIMAL}");
        sql.SET("blocked_reason = #{record.blockedReason,jdbcType=DECIMAL}");
        sql.SET("opt_id = #{record.optId,jdbcType=DECIMAL}");
        sql.SET("opt_name = #{record.optName,jdbcType=VARCHAR}");
        sql.SET("opt_seg_id = #{record.optSegId,jdbcType=DECIMAL}");
        sql.SET("opt_seg_name = #{record.optSegName,jdbcType=VARCHAR}");
        sql.SET("station_id = #{record.stationId,jdbcType=DECIMAL}");
        sql.SET("station_name = #{record.stationName,jdbcType=VARCHAR}");
        sql.SET("is_cnt_times = #{record.isCntTimes,jdbcType=INTEGER}");
        sql.SET("is_cnt_duration = #{record.isCntDuration,jdbcType=INTEGER}");
        sql.SET("blocked_detail = #{record.blockedDetail,jdbcType=VARCHAR}");
        sql.SET("affact_range = #{record.affactRange,jdbcType=VARCHAR}");
        sql.SET("blocked_state = #{record.blockedState,jdbcType=DECIMAL}");
        sql.SET("claim_state = #{record.claimState,jdbcType=DECIMAL}");
        sql.SET("user_id = #{record.userId,jdbcType=DECIMAL}");
        sql.SET("org_id = #{record.orgId,jdbcType=DECIMAL}");
        sql.SET("commit_date = #{record.commitDate,jdbcType=DATE}");
        sql.SET("lv_checker = #{record.lvChecker,jdbcType=DECIMAL}");
        sql.SET("lv_check_date = #{record.lvCheckDate,jdbcType=DATE}");
        sql.SET("lv_check_state = #{record.lvCheckState,jdbcType=DATE}");
        sql.SET("base_checker = #{record.baseChecker,jdbcType=DECIMAL}");
        sql.SET("base_check_date = #{record.baseCheckDate,jdbcType=DATE}");
        sql.SET("base_check_state = #{record.baseCheckState,jdbcType=DECIMAL}");
        sql.SET("modify_user = #{record.modifyUser,jdbcType=DECIMAL}");
        sql.SET("modify_date = #{record.modifyDate,jdbcType=DATE}");
        
        BlockedInfoExample example = (BlockedInfoExample) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table blocked_info
     *
     * @mbg.generated Wed Oct 28 17:18:43 CST 2020
     */
    protected void applyWhere(SQL sql, BlockedInfoExample example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
}