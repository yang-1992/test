package com.ctsi.security.repository;

import com.ctsi.security.domain.BasUser;
import com.ctsi.security.domain.BasUserExample;
import com.ctsi.security.domain.BasUserExample.Criteria;
import com.ctsi.security.domain.BasUserExample.Criterion;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.jdbc.SQL;

import java.util.List;
import java.util.Map;

/**
 * @author ctsi-biyi-generator
*/
public class BasUserSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bas_user
     *
     * @mbg.generated Fri Sep 18 10:12:01 CST 2020
     */
    public String countByExample(BasUserExample example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("bas_user");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bas_user
     *
     * @mbg.generated Fri Sep 18 10:12:01 CST 2020
     */
    public String deleteByExample(BasUserExample example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("bas_user");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bas_user
     *
     * @mbg.generated Fri Sep 18 10:12:01 CST 2020
     */
    public String insertSelective(BasUser record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("bas_user");
        
        if (record.getUserId() != null) {
            sql.VALUES("user_id", "#{userId,jdbcType=DECIMAL}");
        }
        
        if (record.getUserName() != null) {
            sql.VALUES("user_name", "#{userName,jdbcType=VARCHAR}");
        }
        
        if (record.getUserMode() != null) {
            sql.VALUES("user_mode", "#{userMode,jdbcType=TINYINT}");
        }
        
        if (record.getUserTypeId() != null) {
            sql.VALUES("user_type_id", "#{userTypeId,jdbcType=DECIMAL}");
        }
        
        if (record.getUserLoginName() != null) {
            sql.VALUES("user_login_name", "#{userLoginName,jdbcType=VARCHAR}");
        }
        
        if (record.getUserPassword() != null) {
            sql.VALUES("user_password", "#{userPassword,jdbcType=VARCHAR}");
        }
        
        if (record.getUserValid() != null) {
            sql.VALUES("user_valid", "#{userValid,jdbcType=TINYINT}");
        }
        
        if (record.getUserWorkNum() != null) {
            sql.VALUES("user_work_num", "#{userWorkNum,jdbcType=VARCHAR}");
        }
        
        if (record.getUserTel() != null) {
            sql.VALUES("user_tel", "#{userTel,jdbcType=VARCHAR}");
        }
        
        if (record.getUserEmail() != null) {
            sql.VALUES("user_email", "#{userEmail,jdbcType=VARCHAR}");
        }
        
        if (record.getUserFax() != null) {
            sql.VALUES("user_fax", "#{userFax,jdbcType=VARCHAR}");
        }
        
        if (record.getNote() != null) {
            sql.VALUES("note", "#{note,jdbcType=VARCHAR}");
        }
        
        if (record.getCenterNms() != null) {
            sql.VALUES("center_nms", "#{centerNms,jdbcType=DECIMAL}");
        }
        
        if (record.getOrgId() != null) {
            sql.VALUES("org_id", "#{orgId,jdbcType=DECIMAL}");
        }
        
        if (record.getOaUserId() != null) {
            sql.VALUES("oa_user_id", "#{oaUserId,jdbcType=VARCHAR}");
        }
        
        if (record.getPersonId() != null) {
            sql.VALUES("person_id", "#{personId,jdbcType=VARCHAR}");
        }
        
        if (record.getStatus() != null) {
            sql.VALUES("status", "#{status,jdbcType=INTEGER}");
        }
        
        if (record.getUpdateTime() != null) {
            sql.VALUES("update_time", "#{updateTime,jdbcType=TIMESTAMP}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bas_user
     *
     * @mbg.generated Fri Sep 18 10:12:01 CST 2020
     */
    public String selectByExample(BasUserExample example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("user_id");
        } else {
            sql.SELECT("user_id");
        }
        sql.SELECT("user_name");
        sql.SELECT("user_mode");
        sql.SELECT("user_type_id");
        sql.SELECT("user_login_name");
        sql.SELECT("user_password");
        sql.SELECT("user_valid");
        sql.SELECT("user_work_num");
        sql.SELECT("user_tel");
        sql.SELECT("user_email");
        sql.SELECT("user_fax");
        sql.SELECT("note");
        sql.SELECT("center_nms");
        sql.SELECT("org_id");
        sql.SELECT("oa_user_id");
        sql.SELECT("person_id");
        sql.SELECT("status");
        sql.SELECT("update_time");
        sql.FROM("bas_user");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bas_user
     *
     * @mbg.generated Fri Sep 18 10:12:01 CST 2020
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        BasUser record = (BasUser) parameter.get("record");
        BasUserExample example = (BasUserExample) parameter.get("example");
        
        SQL sql = new SQL();
        sql.UPDATE("bas_user");
        
        if (record.getUserId() != null) {
            sql.SET("user_id = #{record.userId,jdbcType=DECIMAL}");
        }
        
        if (record.getUserName() != null) {
            sql.SET("user_name = #{record.userName,jdbcType=VARCHAR}");
        }
        
        if (record.getUserMode() != null) {
            sql.SET("user_mode = #{record.userMode,jdbcType=TINYINT}");
        }
        
        if (record.getUserTypeId() != null) {
            sql.SET("user_type_id = #{record.userTypeId,jdbcType=DECIMAL}");
        }
        
        if (record.getUserLoginName() != null) {
            sql.SET("user_login_name = #{record.userLoginName,jdbcType=VARCHAR}");
        }
        
        if (record.getUserPassword() != null) {
            sql.SET("user_password = #{record.userPassword,jdbcType=VARCHAR}");
        }
        
        if (record.getUserValid() != null) {
            sql.SET("user_valid = #{record.userValid,jdbcType=TINYINT}");
        }
        
        if (record.getUserWorkNum() != null) {
            sql.SET("user_work_num = #{record.userWorkNum,jdbcType=VARCHAR}");
        }
        
        if (record.getUserTel() != null) {
            sql.SET("user_tel = #{record.userTel,jdbcType=VARCHAR}");
        }
        
        if (record.getUserEmail() != null) {
            sql.SET("user_email = #{record.userEmail,jdbcType=VARCHAR}");
        }
        
        if (record.getUserFax() != null) {
            sql.SET("user_fax = #{record.userFax,jdbcType=VARCHAR}");
        }
        
        if (record.getNote() != null) {
            sql.SET("note = #{record.note,jdbcType=VARCHAR}");
        }
        
        if (record.getCenterNms() != null) {
            sql.SET("center_nms = #{record.centerNms,jdbcType=DECIMAL}");
        }
        
        if (record.getOrgId() != null) {
            sql.SET("org_id = #{record.orgId,jdbcType=DECIMAL}");
        }
        
        if (record.getOaUserId() != null) {
            sql.SET("oa_user_id = #{record.oaUserId,jdbcType=VARCHAR}");
        }
        
        if (record.getPersonId() != null) {
            sql.SET("person_id = #{record.personId,jdbcType=VARCHAR}");
        }
        
        if (record.getStatus() != null) {
            sql.SET("status = #{record.status,jdbcType=INTEGER}");
        }
        
        if (record.getUpdateTime() != null) {
            sql.SET("update_time = #{record.updateTime,jdbcType=TIMESTAMP}");
        }
        
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bas_user
     *
     * @mbg.generated Fri Sep 18 10:12:01 CST 2020
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("bas_user");
        
        sql.SET("user_id = #{record.userId,jdbcType=DECIMAL}");
        sql.SET("user_name = #{record.userName,jdbcType=VARCHAR}");
        sql.SET("user_mode = #{record.userMode,jdbcType=TINYINT}");
        sql.SET("user_type_id = #{record.userTypeId,jdbcType=DECIMAL}");
        sql.SET("user_login_name = #{record.userLoginName,jdbcType=VARCHAR}");
        sql.SET("user_password = #{record.userPassword,jdbcType=VARCHAR}");
        sql.SET("user_valid = #{record.userValid,jdbcType=TINYINT}");
        sql.SET("user_work_num = #{record.userWorkNum,jdbcType=VARCHAR}");
        sql.SET("user_tel = #{record.userTel,jdbcType=VARCHAR}");
        sql.SET("user_email = #{record.userEmail,jdbcType=VARCHAR}");
        sql.SET("user_fax = #{record.userFax,jdbcType=VARCHAR}");
        sql.SET("note = #{record.note,jdbcType=VARCHAR}");
        sql.SET("center_nms = #{record.centerNms,jdbcType=DECIMAL}");
        sql.SET("org_id = #{record.orgId,jdbcType=DECIMAL}");
        sql.SET("oa_user_id = #{record.oaUserId,jdbcType=VARCHAR}");
        sql.SET("person_id = #{record.personId,jdbcType=VARCHAR}");
        sql.SET("status = #{record.status,jdbcType=INTEGER}");
        sql.SET("update_time = #{record.updateTime,jdbcType=TIMESTAMP}");
        
        BasUserExample example = (BasUserExample) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bas_user
     *
     * @mbg.generated Fri Sep 18 10:12:01 CST 2020
     */
    public String updateByPrimaryKeySelective(BasUser record) {
        SQL sql = new SQL();
        sql.UPDATE("bas_user");
        
        if (record.getUserName() != null) {
            sql.SET("user_name = #{userName,jdbcType=VARCHAR}");
        }
        
        if (record.getUserMode() != null) {
            sql.SET("user_mode = #{userMode,jdbcType=TINYINT}");
        }
        
        if (record.getUserTypeId() != null) {
            sql.SET("user_type_id = #{userTypeId,jdbcType=DECIMAL}");
        }
        
        if (record.getUserLoginName() != null) {
            sql.SET("user_login_name = #{userLoginName,jdbcType=VARCHAR}");
        }
        
        if (record.getUserPassword() != null) {
            sql.SET("user_password = #{userPassword,jdbcType=VARCHAR}");
        }
        
        if (record.getUserValid() != null) {
            sql.SET("user_valid = #{userValid,jdbcType=TINYINT}");
        }
        
        if (record.getUserWorkNum() != null) {
            sql.SET("user_work_num = #{userWorkNum,jdbcType=VARCHAR}");
        }
        
        if (record.getUserTel() != null) {
            sql.SET("user_tel = #{userTel,jdbcType=VARCHAR}");
        }
        
        if (record.getUserEmail() != null) {
            sql.SET("user_email = #{userEmail,jdbcType=VARCHAR}");
        }
        
        if (record.getUserFax() != null) {
            sql.SET("user_fax = #{userFax,jdbcType=VARCHAR}");
        }
        
        if (record.getNote() != null) {
            sql.SET("note = #{note,jdbcType=VARCHAR}");
        }
        
        if (record.getCenterNms() != null) {
            sql.SET("center_nms = #{centerNms,jdbcType=DECIMAL}");
        }
        
        if (record.getOrgId() != null) {
            sql.SET("org_id = #{orgId,jdbcType=DECIMAL}");
        }
        
        if (record.getOaUserId() != null) {
            sql.SET("oa_user_id = #{oaUserId,jdbcType=VARCHAR}");
        }
        
        if (record.getPersonId() != null) {
            sql.SET("person_id = #{personId,jdbcType=VARCHAR}");
        }
        
        if (record.getStatus() != null) {
            sql.SET("status = #{status,jdbcType=INTEGER}");
        }
        
        if (record.getUpdateTime() != null) {
            sql.SET("update_time = #{updateTime,jdbcType=TIMESTAMP}");
        }
        
        sql.WHERE("user_id = #{userId,jdbcType=DECIMAL}");
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bas_user
     *
     * @mbg.generated Fri Sep 18 10:12:01 CST 2020
     */
    protected void applyWhere(SQL sql, BasUserExample example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }

    public String selectUserIdsByOrgIds(@Param("orgIds") List<Long> orgIds) {
        StringBuilder sql = new StringBuilder("SELECT DISTINCT user_id FROM bas_user WHERE org_id IN (");
        for (int i = 0 ; i < orgIds.size(); i++) {
            sql.append(orgIds.get(i));
            if (i != orgIds.size() - 1) {
                sql.append(",");
            } else {
                sql.append(")");
            }
        }
        return sql.toString();
    }
}