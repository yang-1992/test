package com.ctsi.security.repository;

import com.ctsi.security.domain.BasOrganization;
import com.ctsi.security.domain.BasOrganizationExample;
import com.ctsi.security.domain.BasOrganizationExample.Criteria;
import com.ctsi.security.domain.BasOrganizationExample.Criterion;
import org.apache.ibatis.jdbc.SQL;

import java.util.List;
import java.util.Map;

/**
 * @author ctsi-biyi-generator
*/
public class BasOrganizationSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bas_organization
     *
     * @mbg.generated Thu Sep 10 15:58:37 GMT+08:00 2020
     */
    public String countByExample(BasOrganizationExample example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("bas_organization bo");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bas_organization
     *
     * @mbg.generated Thu Sep 10 15:58:37 GMT+08:00 2020
     */
    public String deleteByExample(BasOrganizationExample example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("bas_organization bo");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bas_organization
     *
     * @mbg.generated Thu Sep 10 15:58:37 GMT+08:00 2020
     */
    public String insertSelective(BasOrganization record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("bas_organization");
        
        if (record.getOrgId() != null) {
            sql.VALUES("org_id", "#{orgId,jdbcType=DECIMAL}");
        }
        
        if (record.getOrgName() != null) {
            sql.VALUES("org_name", "#{orgName,jdbcType=VARCHAR}");
        }
        
        if (record.getParentOrgId() != null) {
            sql.VALUES("parent_org_id", "#{parentOrgId,jdbcType=DECIMAL}");
        }
        
        if (record.getOrgMapType() != null) {
            sql.VALUES("org_map_type", "#{orgMapType,jdbcType=SMALLINT}");
        }
        
        if (record.getOrgType() != null) {
            sql.VALUES("org_type", "#{orgType,jdbcType=SMALLINT}");
        }
        
        if (record.getOrgSerial() != null) {
            sql.VALUES("org_serial", "#{orgSerial,jdbcType=VARCHAR}");
        }
        
        if (record.getDataPosition() != null) {
            sql.VALUES("data_position", "#{dataPosition,jdbcType=SMALLINT}");
        }
        
        if (record.getOrgSiteType() != null) {
            sql.VALUES("org_site_type", "#{orgSiteType,jdbcType=SMALLINT}");
        }
        
        if (record.getDelegateOrgId() != null) {
            sql.VALUES("delegate_org_id", "#{delegateOrgId,jdbcType=DECIMAL}");
        }
        
        if (record.getDelegateOrgPosition() != null) {
            sql.VALUES("delegate_org_position", "#{delegateOrgPosition,jdbcType=SMALLINT}");
        }
        
        if (record.getTransFlag() != null) {
            sql.VALUES("trans_flag", "#{transFlag,jdbcType=INTEGER}");
        }
        
        if (record.getDataFlag() != null) {
            sql.VALUES("data_flag", "#{dataFlag,jdbcType=INTEGER}");
        }
        
        if (record.getAdminDistrictFlag() != null) {
            sql.VALUES("admin_district_flag", "#{adminDistrictFlag,jdbcType=INTEGER}");
        }
        
        if (record.getIsOss() != null) {
            sql.VALUES("is_oss", "#{isOss,jdbcType=TINYINT}");
        }
        
        if (record.getItsmOrgId() != null) {
            sql.VALUES("itsm_org_id", "#{itsmOrgId,jdbcType=DECIMAL}");
        }
        
        if (record.getNote() != null) {
            sql.VALUES("note", "#{note,jdbcType=VARCHAR}");
        }
        
        if (record.getOrgOrder() != null) {
            sql.VALUES("org_order", "#{orgOrder,jdbcType=INTEGER}");
        }
        
        if (record.getOrgLevel() != null) {
            sql.VALUES("org_level", "#{orgLevel,jdbcType=INTEGER}");
        }
        
        if (record.getOrgFullName() != null) {
            sql.VALUES("org_full_name", "#{orgFullName,jdbcType=VARCHAR}");
        }
        
        if (record.getResNo() != null) {
            sql.VALUES("res_no", "#{resNo,jdbcType=VARCHAR}");
        }
        
        if (record.getInnerOrder() != null) {
            sql.VALUES("inner_order", "#{innerOrder,jdbcType=VARCHAR}");
        }
        
        if (record.getInnerCode() != null) {
            sql.VALUES("inner_code", "#{innerCode,jdbcType=VARCHAR}");
        }
        
        if (record.getIsValid() != null) {
            sql.VALUES("is_valid", "#{isValid,jdbcType=TINYINT}");
        }
        
        if (record.getOrgPath() != null) {
            sql.VALUES("org_path", "#{orgPath,jdbcType=VARCHAR}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bas_organization
     *
     * @mbg.generated Thu Sep 10 15:58:37 GMT+08:00 2020
     */
    public String selectByExample(BasOrganizationExample example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("bo.org_id as bo_org_id");
        } else {
            sql.SELECT("bo.org_id as bo_org_id");
        }
        sql.SELECT("bo.org_name as bo_org_name");
        sql.SELECT("bo.parent_org_id as bo_parent_org_id");
        sql.SELECT("bo.org_map_type as bo_org_map_type");
        sql.SELECT("bo.org_type as bo_org_type");
        sql.SELECT("bo.org_serial as bo_org_serial");
        sql.SELECT("bo.data_position as bo_data_position");
        sql.SELECT("bo.org_site_type as bo_org_site_type");
        sql.SELECT("bo.delegate_org_id as bo_delegate_org_id");
        sql.SELECT("bo.delegate_org_position as bo_delegate_org_position");
        sql.SELECT("bo.trans_flag as bo_trans_flag");
        sql.SELECT("bo.data_flag as bo_data_flag");
        sql.SELECT("bo.admin_district_flag as bo_admin_district_flag");
        sql.SELECT("bo.is_oss as bo_is_oss");
        sql.SELECT("bo.itsm_org_id as bo_itsm_org_id");
        sql.SELECT("bo.note as bo_note");
        sql.SELECT("bo.org_order as bo_org_order");
        sql.SELECT("bo.org_level as bo_org_level");
        sql.SELECT("bo.org_full_name as bo_org_full_name");
        sql.SELECT("bo.res_no as bo_res_no");
        sql.SELECT("bo.inner_order as bo_inner_order");
        sql.SELECT("bo.inner_code as bo_inner_code");
        sql.SELECT("bo.is_valid as bo_is_valid");
        sql.SELECT("bo.org_path as bo_org_path");
        sql.FROM("bas_organization bo");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bas_organization
     *
     * @mbg.generated Thu Sep 10 15:58:37 GMT+08:00 2020
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        BasOrganization record = (BasOrganization) parameter.get("record");
        BasOrganizationExample example = (BasOrganizationExample) parameter.get("example");
        
        SQL sql = new SQL();
        sql.UPDATE("bas_organization bo");
        
        if (record.getOrgId() != null) {
            sql.SET("bo.org_id = #{record.orgId,jdbcType=DECIMAL}");
        }
        
        if (record.getOrgName() != null) {
            sql.SET("bo.org_name = #{record.orgName,jdbcType=VARCHAR}");
        }
        
        if (record.getParentOrgId() != null) {
            sql.SET("bo.parent_org_id = #{record.parentOrgId,jdbcType=DECIMAL}");
        }
        
        if (record.getOrgMapType() != null) {
            sql.SET("bo.org_map_type = #{record.orgMapType,jdbcType=SMALLINT}");
        }
        
        if (record.getOrgType() != null) {
            sql.SET("bo.org_type = #{record.orgType,jdbcType=SMALLINT}");
        }
        
        if (record.getOrgSerial() != null) {
            sql.SET("bo.org_serial = #{record.orgSerial,jdbcType=VARCHAR}");
        }
        
        if (record.getDataPosition() != null) {
            sql.SET("bo.data_position = #{record.dataPosition,jdbcType=SMALLINT}");
        }
        
        if (record.getOrgSiteType() != null) {
            sql.SET("bo.org_site_type = #{record.orgSiteType,jdbcType=SMALLINT}");
        }
        
        if (record.getDelegateOrgId() != null) {
            sql.SET("bo.delegate_org_id = #{record.delegateOrgId,jdbcType=DECIMAL}");
        }
        
        if (record.getDelegateOrgPosition() != null) {
            sql.SET("bo.delegate_org_position = #{record.delegateOrgPosition,jdbcType=SMALLINT}");
        }
        
        if (record.getTransFlag() != null) {
            sql.SET("bo.trans_flag = #{record.transFlag,jdbcType=INTEGER}");
        }
        
        if (record.getDataFlag() != null) {
            sql.SET("bo.data_flag = #{record.dataFlag,jdbcType=INTEGER}");
        }
        
        if (record.getAdminDistrictFlag() != null) {
            sql.SET("bo.admin_district_flag = #{record.adminDistrictFlag,jdbcType=INTEGER}");
        }
        
        if (record.getIsOss() != null) {
            sql.SET("bo.is_oss = #{record.isOss,jdbcType=TINYINT}");
        }
        
        if (record.getItsmOrgId() != null) {
            sql.SET("bo.itsm_org_id = #{record.itsmOrgId,jdbcType=DECIMAL}");
        }
        
        if (record.getNote() != null) {
            sql.SET("bo.note = #{record.note,jdbcType=VARCHAR}");
        }
        
        if (record.getOrgOrder() != null) {
            sql.SET("bo.org_order = #{record.orgOrder,jdbcType=INTEGER}");
        }
        
        if (record.getOrgLevel() != null) {
            sql.SET("bo.org_level = #{record.orgLevel,jdbcType=INTEGER}");
        }
        
        if (record.getOrgFullName() != null) {
            sql.SET("bo.org_full_name = #{record.orgFullName,jdbcType=VARCHAR}");
        }
        
        if (record.getResNo() != null) {
            sql.SET("bo.res_no = #{record.resNo,jdbcType=VARCHAR}");
        }
        
        if (record.getInnerOrder() != null) {
            sql.SET("bo.inner_order = #{record.innerOrder,jdbcType=VARCHAR}");
        }
        
        if (record.getInnerCode() != null) {
            sql.SET("bo.inner_code = #{record.innerCode,jdbcType=VARCHAR}");
        }
        
        if (record.getIsValid() != null) {
            sql.SET("bo.is_valid = #{record.isValid,jdbcType=TINYINT}");
        }
        
        if (record.getOrgPath() != null) {
            sql.SET("bo.org_path = #{record.orgPath,jdbcType=VARCHAR}");
        }
        
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bas_organization
     *
     * @mbg.generated Thu Sep 10 15:58:37 GMT+08:00 2020
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("bas_organization bo");
        
        sql.SET("bo.org_id = #{record.orgId,jdbcType=DECIMAL}");
        sql.SET("bo.org_name = #{record.orgName,jdbcType=VARCHAR}");
        sql.SET("bo.parent_org_id = #{record.parentOrgId,jdbcType=DECIMAL}");
        sql.SET("bo.org_map_type = #{record.orgMapType,jdbcType=SMALLINT}");
        sql.SET("bo.org_type = #{record.orgType,jdbcType=SMALLINT}");
        sql.SET("bo.org_serial = #{record.orgSerial,jdbcType=VARCHAR}");
        sql.SET("bo.data_position = #{record.dataPosition,jdbcType=SMALLINT}");
        sql.SET("bo.org_site_type = #{record.orgSiteType,jdbcType=SMALLINT}");
        sql.SET("bo.delegate_org_id = #{record.delegateOrgId,jdbcType=DECIMAL}");
        sql.SET("bo.delegate_org_position = #{record.delegateOrgPosition,jdbcType=SMALLINT}");
        sql.SET("bo.trans_flag = #{record.transFlag,jdbcType=INTEGER}");
        sql.SET("bo.data_flag = #{record.dataFlag,jdbcType=INTEGER}");
        sql.SET("bo.admin_district_flag = #{record.adminDistrictFlag,jdbcType=INTEGER}");
        sql.SET("bo.is_oss = #{record.isOss,jdbcType=TINYINT}");
        sql.SET("bo.itsm_org_id = #{record.itsmOrgId,jdbcType=DECIMAL}");
        sql.SET("bo.note = #{record.note,jdbcType=VARCHAR}");
        sql.SET("bo.org_order = #{record.orgOrder,jdbcType=INTEGER}");
        sql.SET("bo.org_level = #{record.orgLevel,jdbcType=INTEGER}");
        sql.SET("bo.org_full_name = #{record.orgFullName,jdbcType=VARCHAR}");
        sql.SET("bo.res_no = #{record.resNo,jdbcType=VARCHAR}");
        sql.SET("bo.inner_order = #{record.innerOrder,jdbcType=VARCHAR}");
        sql.SET("bo.inner_code = #{record.innerCode,jdbcType=VARCHAR}");
        sql.SET("bo.is_valid = #{record.isValid,jdbcType=TINYINT}");
        sql.SET("bo.org_path = #{record.orgPath,jdbcType=VARCHAR}");
        
        BasOrganizationExample example = (BasOrganizationExample) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bas_organization
     *
     * @mbg.generated Thu Sep 10 15:58:37 GMT+08:00 2020
     */
    public String updateByPrimaryKeySelective(BasOrganization record) {
        SQL sql = new SQL();
        sql.UPDATE("bas_organization");
        
        if (record.getOrgName() != null) {
            sql.SET("org_name = #{orgName,jdbcType=VARCHAR}");
        }
        
        if (record.getParentOrgId() != null) {
            sql.SET("parent_org_id = #{parentOrgId,jdbcType=DECIMAL}");
        }
        
        if (record.getOrgMapType() != null) {
            sql.SET("org_map_type = #{orgMapType,jdbcType=SMALLINT}");
        }
        
        if (record.getOrgType() != null) {
            sql.SET("org_type = #{orgType,jdbcType=SMALLINT}");
        }
        
        if (record.getOrgSerial() != null) {
            sql.SET("org_serial = #{orgSerial,jdbcType=VARCHAR}");
        }
        
        if (record.getDataPosition() != null) {
            sql.SET("data_position = #{dataPosition,jdbcType=SMALLINT}");
        }
        
        if (record.getOrgSiteType() != null) {
            sql.SET("org_site_type = #{orgSiteType,jdbcType=SMALLINT}");
        }
        
        if (record.getDelegateOrgId() != null) {
            sql.SET("delegate_org_id = #{delegateOrgId,jdbcType=DECIMAL}");
        }
        
        if (record.getDelegateOrgPosition() != null) {
            sql.SET("delegate_org_position = #{delegateOrgPosition,jdbcType=SMALLINT}");
        }
        
        if (record.getTransFlag() != null) {
            sql.SET("trans_flag = #{transFlag,jdbcType=INTEGER}");
        }
        
        if (record.getDataFlag() != null) {
            sql.SET("data_flag = #{dataFlag,jdbcType=INTEGER}");
        }
        
        if (record.getAdminDistrictFlag() != null) {
            sql.SET("admin_district_flag = #{adminDistrictFlag,jdbcType=INTEGER}");
        }
        
        if (record.getIsOss() != null) {
            sql.SET("is_oss = #{isOss,jdbcType=TINYINT}");
        }
        
        if (record.getItsmOrgId() != null) {
            sql.SET("itsm_org_id = #{itsmOrgId,jdbcType=DECIMAL}");
        }
        
        if (record.getNote() != null) {
            sql.SET("note = #{note,jdbcType=VARCHAR}");
        }
        
        if (record.getOrgOrder() != null) {
            sql.SET("org_order = #{orgOrder,jdbcType=INTEGER}");
        }
        
        if (record.getOrgLevel() != null) {
            sql.SET("org_level = #{orgLevel,jdbcType=INTEGER}");
        }
        
        if (record.getOrgFullName() != null) {
            sql.SET("org_full_name = #{orgFullName,jdbcType=VARCHAR}");
        }
        
        if (record.getResNo() != null) {
            sql.SET("res_no = #{resNo,jdbcType=VARCHAR}");
        }
        
        if (record.getInnerOrder() != null) {
            sql.SET("inner_order = #{innerOrder,jdbcType=VARCHAR}");
        }
        
        if (record.getInnerCode() != null) {
            sql.SET("inner_code = #{innerCode,jdbcType=VARCHAR}");
        }
        
        if (record.getIsValid() != null) {
            sql.SET("is_valid = #{isValid,jdbcType=TINYINT}");
        }
        
        if (record.getOrgPath() != null) {
            sql.SET("org_path = #{orgPath,jdbcType=VARCHAR}");
        }
        
        sql.WHERE("org_id = #{orgId,jdbcType=DECIMAL}");
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bas_organization
     *
     * @mbg.generated Thu Sep 10 15:58:37 GMT+08:00 2020
     */
    protected void applyWhere(SQL sql, BasOrganizationExample example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
}